@page "/registro"

<AuthorizeView Roles="User">
    <NotAuthorized>
        <NotAuthorizedPage />
    </NotAuthorized>
    <Authorized>
        <h3>Registro</h3>
        <RadzenStack>
            <RadzenFieldset Text="Ingresa valores" class="rz-background-color-base-100">
                <RadzenStack  Gap="1rem">
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="3">
                            <RadzenText TextStyle="TextStyle.H5" class="rz-pt-1"> Numero de Parte </RadzenText>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="5">
                            <RadzenTextBox @bind-Value="materialNPTXT" @onkeydown=@(e => enter(e, 1)) @ref="materialTextBox" Disabled="enableMaterial" Style="width: 100%" aria-label="Default TextBox" Placeholder="Ingresa codigo Numero de Parte" />
                            @* <RadzenTextBox @bind-Value="materialNPTXT" @onkeydown=@(e => enter(e, 1)) Disabled="enableMaterial" Style="width: 100%" aria-label="Default TextBox" Placeholder="Ingresa codigo Numero de Parte" /> *@
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.Left" class="rz-pt-2"> @descripcion </RadzenText>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="3">
                            <RadzenText TextStyle="TextStyle.H5" class="rz-pt-1"> Storage Bin </RadzenText>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="5">
                            <RadzenTextBox @bind-Value="storageTXT" @onkeydown=@(e => enter(e, 2)) Style="width: 100%" Disabled="enableStorage" aria-label="Default TextBox" Placeholder="Ingresa codigo Storage Bin" />
                            @* <RadzenTextBox @bind-Value="storageTXT" @onkeydown=@(e => enter(e, 2)) Disabled="enableStorage" Style="width: 100%" aria-label="Default TextBox" Placeholder="Ingresa codigo Storage Bin" /> *@
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenFieldset>
        </RadzenStack>

        
        @* COLOCAR CONIDCION, SI NO EXISTE ALGUNO DE LOS DOS, MOSTRAR BOTON DE CAPTURA ADICIONAL*@
        @if (enableAdicional)
        {
            <br />
            <RadzenRow AlignItems="AlignItems.Start">
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenText TextStyle="TextStyle.Body2" class="rz-pt-2 rz-color-danger"> Algun valor no existe en base de datos. ¿Deseas realizar la captura adicional?  </RadzenText>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="3">
                    <RadzenButton Click="()=>{newRegister = true;enableAdicional = false; enableGuardado = true;}" Text="Captura Adicional" Icon="add_circle" ButtonStyle="ButtonStyle.Warning" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenButton Click="()=>refresh()" Text="Realizar nueva captura" Icon="cancel" ButtonStyle="ButtonStyle.Danger" />
                </RadzenColumn>
            </RadzenRow>
        }
        
        
        

        @* COLOCAR CONDICION, SI EXISTE AMBOS VALORES, MOSTRAR CANTIDAD*@
        @if (enableGuardado)
        {
            <br />
            <br />
            <RadzenStack>
                <RadzenFieldset Text="Ingresa Cantidad" class="rz-background-color-base-100">
                    <RadzenStack Gap="1rem">
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="3">
                                <RadzenText TextStyle="TextStyle.H5" class="rz-pt-1"> Cantidad </RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="5">
                                <RadzenNumeric TValue="int" Min=0 Value=@cantidad Change=@(args => cantidad = args) InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" />
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenStack>
            <br />
            <RadzenButton Click="ActivaMensajeGuardado" Text="Guardar" Icon="add_circle" ButtonStyle="ButtonStyle.Primary" />
            <RadzenButton Click="()=>refresh()" Text="Realizar nueva captura" Icon="cancel" ButtonStyle="ButtonStyle.Danger" />
        }
        


        @* *******   LOADING   ******* *@
        @if (Loading.showLoading)
        {
            <div class="modal fade show bg-black bg-opacity-50" style="display: block">
                <div class="modal-dialog modal-sm modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-body">
                            <div class="d-flex align-items-center start">
                                <div class="spinner-border" aria-hidden="true"></div>
                                <strong role="status" class="ps-3">@Loading.messageLoading</strong>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        @* *******   MODAL   ******* *@
        @if (Modal.showModal)
        {
            <div class="modal fade show bg-black bg-opacity-50" style="display:block;" data-bs-backdrop="static" data-bs-keyboard="false">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header border-bottom-0">
                            <h1 class="modal-title fs-5">@Modal.TitleModal</h1>
                        </div>
                        <div class="modal-body">
                            <div class="d-flex flex-row mb-3 align-items-center">
                                @if (Modal.ModalIcon.Length != 0)
                                {
                                    <img src="@Modal.ModalIcon" class="img-fluid" alt="Modal Icon" style="max-width: 50px; max-height: 50px;" />
                                }
                                <div class="p-2 fs-5">@Modal.MessageModal</div>
                            </div>
                            @if (Modal.MessageSecondary.Length != 0)
                            {
                                <div class="d-flex flex-row mb-3 align-items-center">
                                    <div class="p-2 fs-5">@Modal.MessageSecondary</div>
                                </div>
                            }
                        </div>
                        <div class="modal-footer border-top-0">
                            <button type="button" class="btn btn-@(Modal.MessageType.Length != 0 ? Modal.MessageType.ToLower() :"light" )" @onclick="() => Modal.Hide()">ACEPTAR</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>


@code {
    private RadzenTextBox materialTextBox;

    string materialNPTXT = "";
    string descripcion = "";
    string storageTXT = "";
    int cantidad = 0;

    bool enableMaterial = false;
    bool enableStorage = false;
    bool enableAdicional = false;
    bool enableGuardado = false;

    bool newRegister = false;

    bool materialValid = false;
    bool storageValid = false;


    [Inject]
    private InputsDataService InputsDataService { get; set; }

    private List<PeriodoDTO> listPeriodo = new List<PeriodoDTO>();
    List<StorageBinDTO> listStorage = new List<StorageBinDTO>();
    StorageBinDTO storage = new StorageBinDTO();
    List<MasterDataDTO> listMaterial = new List<MasterDataDTO>();
    MasterDataDTO material = new MasterDataDTO();
    List<InitialLoadDTO> listInitial = new List<InitialLoadDTO>();

    protected override async Task OnInitializedAsync()
    {
        listPeriodo = await InputsDataService.GetPeriodoAsync();
        if (listPeriodo.Count() > 0 && listPeriodo[0].activo == 1)
        {
            listStorage = await InputsDataService.GetStorageAsync(listPeriodo[0].id);
            listMaterial = await InputsDataService.GetMasterDataAsync(listPeriodo[0].id);
            listInitial = await InputsDataService.GetInitialLoadAsync(listPeriodo[0].id);
        } else
        {
            Modal.Show("EL ADMINISTRADOR AUN NO HA ACTIVDADO EL PERIODO", "PRECAUCION", Message.WARNING, Icon.WARNING, "RECARGE LA PAGINA CUANDO SE LE NOTIFIQUE EL CAMBIO DE PERIODO");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await materialTextBox.FocusAsync();
        }
    }



    private async Task enter(KeyboardEventArgs e, int textbox)
    {
        if (e.Key == "Tab" || e.Key == "Enter")
        {
            switch (textbox)
            {
                case 1:
                    material = listMaterial.Where(item => item.materialID == materialNPTXT).FirstOrDefault()!;
                    if(material is not null)
                    {
                        materialValid = true;
                        descripcion = material.descripcion!;
                    }
                    if (storageTXT != "" && materialNPTXT != "")
                        checkTextBox();
                    // Console.WriteLine($"Se registro '{materialNPTXT}' en el textbox 1");
                    break;

                case 2:
                    storage = listStorage.Where(item => item.storagebin == storageTXT).FirstOrDefault()!;
                    if (storage is not null)
                    {
                        storageValid = true;
                    }
                    if (storageTXT != "" && materialNPTXT != "")
                        checkTextBox();
                    // Console.WriteLine($"Se registro '{storageTXT}' en el textbox 2");
                    break;
            }
        }
    }

    private void checkTextBox()
    {
        //se hace otra validacion ya que los campos hasta este momento aun son modificables
        if (materialNPTXT == "" && storageTXT == "")
        {
            Modal.Show("EXISTEN CAMPOS VACIOS", "PRECAUCION", Message.WARNING, Icon.WARNING);
            return;
        } 
        material = listMaterial.Where(item => item.materialID == materialNPTXT).FirstOrDefault()!;
        storage = listStorage.Where(item => item.storagebin == storageTXT).FirstOrDefault()!;
        if(material is null || storage is null)
        {
            enableAdicional = true;
        } else
        {
            enableGuardado = true;
        }
        enableMaterial = true;
        enableStorage = true;
    }

    private void refresh()
    {
        NavManager.NavigateTo("home");
        NavManager.NavigateTo("registro");
    }

    private async Task ActivaMensajeGuardado()
    {
        Loading.Show();
        await Task.Delay(2000);
        Loading.Hide();
        Modal.Show("REGISTRO GUARDADO EXITOSAMENTE", "GUARDADO", Message.SUCCESS, Icon.SUCCESS);
        refresh();
    }
}
