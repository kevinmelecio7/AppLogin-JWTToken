@page "/"
@rendermode InteractiveServer


<div class="container">
    <div class="row">
        <div class="col-sm-4">
            <h2>Login</h2>
            <EditForm Model="@Login" OnValidSubmit="LoginClicked">
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <label class="form-label">Email Address</label>
                    <InputText @bind-Value="Login.Email" class="form-control"> </InputText>
                </div>
                <div class="form-group mt-3">
                    <label class="form-label">Password</label>
                    <InputText @bind-Value="Login.Password" class="form-control"> </InputText>
                </div>
                <div class="form-group mt-3">
                    <button class="btn btn-primary" type="submit">Login</button>
                </div>
                <ValidationSummary/>
            </EditForm>
        </div>
    </div>
</div>

@code {
    public LoginDTO Login = new();

    protected override async Task OnInitializedAsync()
    {
        LoginResponse response = await accountService.LogoutAsync();
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        customAuthStateProvider.UpdateNotAuthenticationState();
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var mensajeLogout = await sessionStorage.GetItemAsync<string>("logout");
            if (!string.IsNullOrEmpty(mensajeLogout))
            {
                await js.InvokeVoidAsync("alert", mensajeLogout);
                await sessionStorage.SetItemAsync("logout", "");
            }
        }
    }

    

    async Task LoginClicked()
    {
        LoginResponse response = await accountService.LoginAsync(Login);
        if (!response.Flag)
        {
            await js.InvokeVoidAsync("alert", response.Message);
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        customAuthStateProvider.UpdateAuthenticationState(response.JWTToken);
        await sessionStorage.SetItemAsync("cuenta", Login.Email);
        NavManager.NavigateTo("/home", forceLoad: true);
    }
}
