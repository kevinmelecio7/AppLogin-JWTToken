@page "/users"


<style>
    .rz-grid-table {
        width: unset;
    }
</style>


<AuthorizeView Roles="Admin">
    <NotAuthorized>
        <NotAuthorizedPage/>
    </NotAuthorized>
    <Authorized>
        <h3>Usuarios y Roles</h3>
        <br/>
        <span>Tabla para modificar, eliminar y agregar usuarios</span>

        <br/>

        @if(users != null)
        {
            <RadzenDataGrid @ref="usersGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" ColumnWidth="150rem" EditMode="@editMode"
                            Data="users" TItem="UserDTO" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Filter="@Reset">

                <HeaderTemplate>
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Agregar Nuevo Usuario" Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single && usersToInsert.Count() > 0)" />
                </HeaderTemplate>
                 <Columns>
                    <RadzenDataGridColumn Property="noEmpleado" Title="No. Empleado" Width="100rem">
                        <EditTemplate Context="user">
                            <RadzenTextBox @bind-Value="user.noEmpleado" Style="width: 100%" aria-label="Default TextBox" />
                        </EditTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Property="nombre" Title="Nombre" Width="200rem">
                        <EditTemplate Context="user">
                            <RadzenTextBox @bind-Value="user.nombre" Style="width: 100%" aria-label="Default TextBox" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="rol" Title="Rol" >
                        <EditTemplate Context="user">
                            <RadzenTextBox @bind-Value="user.rol" Style="width: 100%" aria-label="Default TextBox" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Context="user" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right" Width="15rem">
                        <Template Context="user">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" 
                                Click="@(args => EditRow(user))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                                          Click="@(args => DeleteRow(user))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="user">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" aria-label="Save"
                                Click="@((args) => SaveRow(user))" >
                            </RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" aria-label="Cancel"
                                Click="@((args) => CancelEdit(user))" >
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" aria-label="Delete"
                                Click="@(args => DeleteRow(user))" >
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
            @* <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Nombre</th>
                        <th>Email</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in users)
                    {
                        <tr>
                            <td>@user.id</td>
                            <td>@user.nombre</td>
                            <td>@user.rol</td>
                        </tr>
                    }
                </tbody>
            </table> *@
        }

        @* *******   LOADING   ******* *@
        @if (Loading.showLoading)
        {
            <div class="modal fade show bg-black bg-opacity-50" style="display: block">
                <div class="modal-dialog modal-sm modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-body">
                            <div class="d-flex align-items-center start">
                                <div class="spinner-border" aria-hidden="true"></div>
                                <strong role="status" class="ps-3">@Loading.messageLoading</strong>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        @* *******   MODAL   ******* *@
        @if (Modal.showModal)
        {
            <div class="modal fade show bg-black bg-opacity-50" style="display:block;" data-bs-backdrop="static" data-bs-keyboard="false">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header border-bottom-0">
                            <h1 class="modal-title fs-5">@Modal.TitleModal</h1>
                        </div>
                        <div class="modal-body">
                            <div class="d-flex flex-row mb-3 align-items-center">
                                @if (Modal.ModalIcon.Length != 0)
                                {
                                    <img src="@Modal.ModalIcon" class="img-fluid" alt="Modal Icon" style="max-width: 50px; max-height: 50px;" />
                                }
                                <div class="p-2 fs-5">@Modal.MessageModal</div>
                            </div>
                            @if (Modal.MessageSecondary.Length != 0)
                            {
                                <div class="d-flex flex-row mb-3 align-items-center">
                                    <div class="p-2 fs-5">@Modal.MessageSecondary</div>
                                </div>
                            }
                        </div>
                        <div class="modal-footer border-top-0">
                            <button type="button" class="btn btn-@(Modal.MessageType.Length != 0 ? Modal.MessageType.ToLower() :"light" )" @onclick="() => Modal.Hide()">ACEPTAR</button>
                        </div>
                    </div>
                </div>
            </div>
        }
        
    </Authorized>
</AuthorizeView>

@code {
    bool newUser = false;

    [Inject]
    private UserService userService { get; set; }

    private List<UserDTO> users;

    RadzenDataGrid<UserDTO> usersGrid;

    DataGridEditMode editMode = DataGridEditMode.Single;

    List<UserDTO> usersToInsert = new List<UserDTO>();
    List<UserDTO> usersToUpdate = new List<UserDTO>();

    protected override async Task OnInitializedAsync()
    {
        users = await userService.GetUserAsync();
    }


    void Reset()
    {
        usersToInsert.Clear();
        usersToUpdate.Clear();
    }

    void Reset(UserDTO user)
    {
        usersToInsert.Remove(user);
        usersToUpdate.Remove(user);
    }


    void OnUpdateRow(UserDTO user)
    {
        Reset(user);
    }

    async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }
        var user = new UserDTO();
        usersToInsert.Add(user);
        await usersGrid.InsertRow(user);
        newUser = true;
    }

    void OnCreateRow(UserDTO user)
    {
        usersToInsert.Remove(user);
    }


    async Task EditRow(UserDTO user)
    {
        Reset();
        usersToUpdate.Add(user);
        await usersGrid.EditRow(user);
    }

    async Task DeleteRow(UserDTO user)
    {
        Loading.Show();
        Reset(user);

        //elimnar un nuevo usuario
        Console.WriteLine("ELIMNAR USUARIO--->");
        Console.WriteLine($"ID: {user.id} \n Num: {user.noEmpleado} \n Nombre: {user.nombre} \n Rol: {user.rol}");
        Modal.Show($"SE HA ELIMINADO EL USUARIO CON NUMERO DE EMPLEADO {user.noEmpleado}", "GUARDADO", Message.SUCCESS, Icon.SUCCESS);
        await CancelEdit(user);
        Loading.Hide();
    }

    async Task SaveRow(UserDTO user)
    {
        Loading.Show();
        if (newUser)
        {
            //insertar un nuevo usuario
            Console.WriteLine("AGREGAR USUARIO--->");
            Console.WriteLine($"Num: {user.noEmpleado} \n Nombre: {user.nombre} \n Rol: {user.rol}");
            Modal.Show($"SE HA REGISTRADO EL NUEVO USUARIO CON ROL {user.rol}", "GUARDADO", Message.SUCCESS, Icon.SUCCESS);
        } else
        {
            //modificar un usuario existente
            Console.WriteLine("EDITAR USUARIO--->");
            Console.WriteLine($"ID: {user.id} \n Num: {user.noEmpleado} \n Nombre: {user.nombre} \n Rol: {user.rol}");
            Modal.Show($"SE HA MODIFICADO LA INFORMACION PARA EL USUARIO CON NUMERO DE EMPLEADO {user.noEmpleado}", "GUARDADO", Message.SUCCESS, Icon.SUCCESS);
        }
        await CancelEdit(user);
        Loading.Hide();
    }

    async Task CancelEdit(UserDTO user)
    {
        Loading.Show();
        Reset(user);
        usersGrid.CancelEditRow(user);
        users = await userService.GetUserAsync();
        newUser = false;
        Loading.Hide();
    }


}
