@page "/users"


<style>
    .rz-grid-table {
        width: unset;
    }
</style>


<AuthorizeView Roles="Admin">
    <NotAuthorized>
        <NotAuthorizedPage/>
    </NotAuthorized>
    <Authorized>
        <h3>Users and Roles</h3>
        <br/>
        <span>Tabla para modificar, eliminar y agregar usuarios</span>

        <br/>

        @if(users != null)
        {
            <RadzenDataGrid @ref="usersGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" ColumnWidth="150rem" EditMode="@edittMode"
                            Data="users" TItem="UserDTO" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Filter="@Reset">
                <Columns>
                    <RadzenDataGridColumn Property="noEmpleado" Title="No. Empleado" Width="100rem">
                        <EditTemplate Context="user">
                            <RadzenTextBox @bind-Value="user.noEmpleado" Style="width: 100%" aria-label="Default TextBox" />
                        </EditTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Property="nombre" Title="Nombre" Width="200rem">
                        <EditTemplate Context="user">
                            <RadzenTextBox @bind-Value="user.nombre" Style="width: 100%" aria-label="Default TextBox" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="rol" Title="Rol" >
                        <EditTemplate Context="user">
                            <RadzenTextBox @bind-Value="user.rol" Style="width: 100%" aria-label="Default TextBox" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Context="user" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right" Width="15rem">
                        <Template Context="user">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" 
                                Click="@(args => EditRow(user))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                                          Click="@(args => DeleteRow(user))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="user">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" aria-label="Save"
                                Click="@((args) => SaveRow(user))" >
                            </RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" aria-label="Cancel"
                                Click="@((args) => CancelEdit(user))" >
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" aria-label="Delete"
                                Click="@(args => DeleteRow(user))" >
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
            @* <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Nombre</th>
                        <th>Email</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in users)
                    {
                        <tr>
                            <td>@user.id</td>
                            <td>@user.nombre</td>
                            <td>@user.rol</td>
                        </tr>
                    }
                </tbody>
            </table> *@
        }
        
    </Authorized>
</AuthorizeView>

@code {
    
    private List<UserDTO> users;
    [Inject]
    private UserService userService { get; set; }

    RadzenDataGrid<UserDTO> usersGrid;

    DataGridEditMode edittMode = DataGridEditMode.Single;

    List<UserDTO> usersToInsert = new List<UserDTO>();
    List<UserDTO> usersToUpdate = new List<UserDTO>();

    protected override async Task OnInitializedAsync()
    {
        users = await userService.GetUserAsync();
    }



    void OnUpdateRow(UserDTO user)
    {
        // Reset(order);

        // dbContext.Update(order);

        // dbContext.SaveChanges();
    }

    void OnCreateRow(UserDTO user)
    {
        // dbContext.Add(order);

        // dbContext.SaveChanges();

        // ordersToInsert.Remove(order);
    }

    void Reset()
    {
        usersToInsert.Clear();
        usersToUpdate.Clear();
    }




    async Task EditRow(UserDTO user)
    {
        Reset();
        usersToUpdate.Add(user);
        await usersGrid.EditRow(user);
    }

    async Task DeleteRow(UserDTO user)
    {
        // Reset(order);

        // if (orders.Contains(order))
        // {
        //     dbContext.Remove<Order>(order);

        //     dbContext.SaveChanges();

        //     await ordersGrid.Reload();
        // }
        // else
        // {
        //     ordersGrid.CancelEditRow(order);
        //     await ordersGrid.Reload();
        // }
    }

    async Task SaveRow(UserDTO user)
    {
        // await ordersGrid.UpdateRow(order);
    }

    void CancelEdit(UserDTO user)
    {
        // Reset(order);

        // ordersGrid.CancelEditRow(order);

        // var orderEntry = dbContext.Entry(order);
        // if (orderEntry.State == EntityState.Modified)
        // {
        //     orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //     orderEntry.State = EntityState.Unchanged;
        // }
    }


}
